{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gowng\\\\Downloads\\\\ohDog\\\\src\\\\components\\\\Maps.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Map, MapMarker } from 'react-kakao-maps-sdk'; // import '../css/map.scss';\n\nimport '../css/map.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  kakao\n} = window; // const { kakao } = window;\n// let infowindow = new kakao.maps.InfoWindow({ zIndex: 1 });\n// var keywords = '애견동반카페';\n// const Map = () => {\n//   const oneRef = useRef();\n//   const twoRef = useRef();\n//   const threeRef = useRef();\n//   const fourRef = useRef();\n//   const onClick = (e) => {\n//     if (e.target.name == '애견동반카페') {\n//       keywords = oneRef.current.name;\n//       console.log(typeof keywords);\n//       console.log(oneRef.current.name);\n//       return keywords;\n//     } else if (e.target.name == '동물병원') {\n//       keywords = twoRef.current.name;\n//       console.log(twoRef.current.name);\n//       return keywords;\n//     } else if (e.target.name == '애견미용실') {\n//       keywords = threeRef.current.name;\n//       console.log(threeRef.current.name);\n//       return keywords;\n//     } else if (e.target.name == '애견동반식당') {\n//       keywords = fourRef.current.name;\n//       console.log(fourRef.current.name);\n//       return keywords;\n//     }\n//   };\n//   useEffect(() => {\n//     var container = document.getElementById('map');\n//     var options = {\n//       center: new kakao.maps.LatLng(37.365264512305174, 127.10676860117488),\n//       level: 3,\n//     };\n//     var map = new kakao.maps.Map(container, options);\n//     // 장소 검색 객체를 생성\n//     const ps = new kakao.maps.services.Places();\n//     // 키워드로 장소를 검색\n//     ps.keywordSearch(keywords, placesSearchCB);\n//     // 키워드 검색 완료 시 호출되는 콜백함수\n//     function placesSearchCB(data, status, pagination) {\n//       if (status === kakao.maps.services.Status.OK) {\n//         // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\n//         // LatLngBounds 객체에 좌표를 추가\n//         let bounds = new kakao.maps.LatLngBounds();\n//         for (let i = 0; i < data.length; i++) {\n//           displayMarker(data[i]);\n//           bounds.extend(new kakao.maps.LatLng(data[i].y, data[i].x));\n//         }\n//         // 검색된 장소 위치를 기준으로 지도 범위를 재설정\n//         map.setBounds(bounds);\n//       }\n//     }\n//     // 지도에 마커를 표시하는 함수\n//     function displayMarker(place) {\n//       // 마커를 생성하고 지도에 표시\n//       let marker = new kakao.maps.Marker({\n//         map: map,\n//         position: new kakao.maps.LatLng(place.y, place.x),\n//       });\n//       // 마커에 클릭이벤트를 등록\n//       kakao.maps.event.addListener(marker, 'click', function () {\n//         // 마커를 클릭하면 장소명이 인포윈도우에 표출\n//         infowindow.setContent(\n//           '<div style=\"padding:5px;font-size:12px;\">' +\n//             place.place_name +\n//             '</div>',\n//         );\n//         infowindow.open(map, marker);\n//       });\n//     }\n//   }, [keywords]);\n//   return (\n//     <>\n//       <form className=\"search\">\n//         <input type=\"text\" placeholder=\"현재위치를 입력해주세요\" />\n//         <input type=\"submit\" value=\"검색\" />\n//       </form>\n//       <div className=\"category\">\n//         <input\n//           type=\"button\"\n//           name=\"애견동반카페\"\n//           value=\"카페\"\n//           ref={oneRef}\n//           onClick={onClick}\n//         />\n//         <input\n//           type=\"button\"\n//           name=\"동물병원\"\n//           value=\"병원\"\n//           ref={twoRef}\n//           onClick={onClick}\n//         />\n//         <input\n//           type=\"button\"\n//           name=\"애견미용실\"\n//           value=\"미용실\"\n//           ref={threeRef}\n//           onClick={onClick}\n//         />\n//         <input\n//           type=\"button\"\n//           name=\"애견동반식당\"\n//           value=\"식당\"\n//           ref={fourRef}\n//           onClick={onClick}\n//         />\n//       </div>\n//       <div className=\"mapContent\">\n//         <div\n//           id=\"map\"\n//           style={{\n//             margin: '0 auto',\n//             width: '80%',\n//             height: '600px',\n//           }}\n//         ></div>\n//       </div>\n//     </>\n//   );\n// };\n// export default Map;\n// // 마커를 클릭했을 때 해당 장소의 상세정보를 보여줄 커스텀오버레이입니다\n// var placeOverlay = new kakao.maps.CustomOverlay({ zIndex: 1 }),\n//   contentNode = document.createElement('div'), // 커스텀 오버레이의 컨텐츠 엘리먼트 입니다\n//   markers = [], // 마커를 담을 배열입니다\n//   currCategory = ''; // 현재 선택된 카테고리를 가지고 있을 변수입니다\n// const Map = () => {\n//   useEffect(() => {\n//     var mapContainer = document.getElementById('map'), // 지도를 표시할 div\n//       mapOption = {\n//         center: new kakao.maps.LatLng(37.566826, 126.9786567), // 지도의 중심좌표\n//         level: 5, // 지도의 확대 레벨\n//       };\n//     // 지도를 생성합니다\n//     var map = new kakao.maps.Map(mapContainer, mapOption);\n//     // 장소 검색 객체를 생성합니다\n//     var ps = new kakao.maps.services.Places(map);\n//     // 지도에 idle 이벤트를 등록합니다\n//     kakao.maps.event.addListener(map, 'idle', searchPlaces);\n//     // 커스텀 오버레이의 컨텐츠 노드에 css class를 추가합니다\n//     contentNode.className = 'placeinfo_wrap';\n//     // 커스텀 오버레이의 컨텐츠 노드에 mousedown, touchstart 이벤트가 발생했을때\n//     // 지도 객체에 이벤트가 전달되지 않도록 이벤트 핸들러로 kakao.maps.event.preventMap 메소드를 등록합니다\n//     addEventHandle(contentNode, 'mousedown', kakao.maps.event.preventMap);\n//     addEventHandle(contentNode, 'touchstart', kakao.maps.event.preventMap);\n//     // 커스텀 오버레이 컨텐츠를 설정합니다\n//     placeOverlay.setContent(contentNode);\n//     // 각 카테고리에 클릭 이벤트를 등록합니다\n//     addCategoryClickEvent();\n//     // 엘리먼트에 이벤트 핸들러를 등록하는 함수입니다\n//     function addEventHandle(target, type, callback) {\n//       if (target.addEventListener) {\n//         target.addEventListener(type, callback);\n//       } else {\n//         target.attachEvent('on' + type, callback);\n//       }\n//     }\n//     // 카테고리 검색을 요청하는 함수입니다\n//     function searchPlaces() {\n//       if (!currCategory) {\n//         return;\n//       }\n//       // 커스텀 오버레이를 숨깁니다\n//       placeOverlay.setMap(null);\n//       // 지도에 표시되고 있는 마커를 제거합니다\n//       removeMarker();\n//       ps.categorySearch(currCategory, placesSearchCB, { useMapBounds: true });\n//     }\n//     // 장소검색이 완료됐을 때 호출되는 콜백함수 입니다\n//     function placesSearchCB(data, status, pagination) {\n//       if (status === kakao.maps.services.Status.OK) {\n//         // 정상적으로 검색이 완료됐으면 지도에 마커를 표출합니다\n//         displayPlaces(data);\n//       } else if (status === kakao.maps.services.Status.ZERO_RESULT) {\n//         // 검색결과가 없는경우 해야할 처리가 있다면 이곳에 작성해 주세요\n//       } else if (status === kakao.maps.services.Status.ERROR) {\n//         // 에러로 인해 검색결과가 나오지 않은 경우 해야할 처리가 있다면 이곳에 작성해 주세요\n//       }\n//     }\n//     // 지도에 마커를 표출하는 함수입니다\n//     function displayPlaces(places) {\n//       // 몇번째 카테고리가 선택되어 있는지 얻어옵니다\n//       // 이 순서는 스프라이트 이미지에서의 위치를 계산하는데 사용됩니다\n//       var order = document\n//         .getElementById(currCategory)\n//         .getAttribute('data-order');\n//       for (var i = 0; i < places.length; i++) {\n//         // 마커를 생성하고 지도에 표시합니다\n//         var marker = addMarker(\n//           new kakao.maps.LatLng(places[i].y, places[i].x),\n//           order,\n//         );\n//         // 마커와 검색결과 항목을 클릭 했을 때\n//         // 장소정보를 표출하도록 클릭 이벤트를 등록합니다\n//         (function (marker, place) {\n//           kakao.maps.event.addListener(marker, 'click', function () {\n//             displayPlaceInfo(place);\n//           });\n//         })(marker, places[i]);\n//       }\n//     }\n//     // 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\n//     function addMarker(position, order) {\n//       var imageSrc =\n//           'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/places_category.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다\n//         imageSize = new kakao.maps.Size(27, 28), // 마커 이미지의 크기\n//         imgOptions = {\n//           spriteSize: new kakao.maps.Size(72, 208), // 스프라이트 이미지의 크기\n//           spriteOrigin: new kakao.maps.Point(46, order * 36), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\n//           offset: new kakao.maps.Point(11, 28), // 마커 좌표에 일치시킬 이미지 내에서의 좌표\n//         },\n//         markerImage = new kakao.maps.MarkerImage(\n//           imageSrc,\n//           imageSize,\n//           imgOptions,\n//         ),\n//         marker = new kakao.maps.Marker({\n//           position: position, // 마커의 위치\n//           image: markerImage,\n//         });\n//       marker.setMap(map); // 지도 위에 마커를 표출합니다\n//       markers.push(marker); // 배열에 생성된 마커를 추가합니다\n//       return marker;\n//     }\n//     // 지도 위에 표시되고 있는 마커를 모두 제거합니다\n//     function removeMarker() {\n//       for (var i = 0; i < markers.length; i++) {\n//         markers[i].setMap(null);\n//       }\n//       markers = [];\n//     }\n//     // 클릭한 마커에 대한 장소 상세정보를 커스텀 오버레이로 표시하는 함수입니다\n//     function displayPlaceInfo(place) {\n//       var content =\n//         '<div class=\"placeinfo\">' +\n//         '   <a class=\"title\" href=\"' +\n//         place.place_url +\n//         '\" target=\"_blank\" title=\"' +\n//         place.place_name +\n//         '\">' +\n//         place.place_name +\n//         '</a>';\n//       if (place.road_address_name) {\n//         content +=\n//           '    <span title=\"' +\n//           place.road_address_name +\n//           '\">' +\n//           place.road_address_name +\n//           '</span>' +\n//           '  <span class=\"jibun\" title=\"' +\n//           place.address_name +\n//           '\">(지번 : ' +\n//           place.address_name +\n//           ')</span>';\n//       } else {\n//         content +=\n//           '    <span title=\"' +\n//           place.address_name +\n//           '\">' +\n//           place.address_name +\n//           '</span>';\n//       }\n//       content +=\n//         '    <span class=\"tel\">' +\n//         place.phone +\n//         '</span>' +\n//         '</div>' +\n//         '<div class=\"after\"></div>';\n//       contentNode.innerHTML = content;\n//       placeOverlay.setPosition(new kakao.maps.LatLng(place.y, place.x));\n//       placeOverlay.setMap(map);\n//     }\n//     // 각 카테고리에 클릭 이벤트를 등록합니다\n//     function addCategoryClickEvent() {\n//       var category = document.getElementById('category'),\n//         children = category.children;\n//       for (var i = 0; i < children.length; i++) {\n//         children[i].onclick = onClickCategory;\n//       }\n//     }\n//     // 카테고리를 클릭했을 때 호출되는 함수입니다\n//     function onClickCategory() {\n//       var id = this.id,\n//         className = this.className;\n//       placeOverlay.setMap(null);\n//       if (className === 'on') {\n//         currCategory = '';\n//         changeCategoryClass();\n//         removeMarker();\n//       } else {\n//         currCategory = id;\n//         changeCategoryClass(this);\n//         searchPlaces();\n//       }\n//     }\n//     // 클릭된 카테고리에만 클릭된 스타일을 적용하는 함수입니다\n//     function changeCategoryClass(el) {\n//       var category = document.getElementById('category'),\n//         children = category.children,\n//         i;\n//       for (i = 0; i < children.length; i++) {\n//         children[i].className = '';\n//       }\n//       if (el) {\n//         el.className = 'on';\n//       }\n//     }\n//   }, []);\n//   return (\n//     <div>\n//       <div className=\"map_wrap\">\n//         <div\n//           id=\"map\"\n//           style={{\n//             width: '100%',\n//             height: '100%',\n//             position: 'relative',\n//             overflow: 'hidden',\n//           }}\n//         ></div>\n//         <ul id=\"category\">\n//           <li id=\"BK9\" data-order=\"0\">\n//             <span className=\"category_bg bank\"></span>\n//             은행\n//           </li>\n//           <li id=\"MT1\" data-order=\"1\">\n//             <span className=\"category_bg mart\"></span>\n//             마트\n//           </li>\n//           <li id=\"PM9\" data-order=\"2\">\n//             <span className=\"category_bg pharmacy\"></span>\n//             약국\n//           </li>\n//           <li id=\"OL7\" data-order=\"3\">\n//             <span className=\"category_bg oil\"></span>\n//             주유소\n//           </li>\n//           <li id=\"CE7\" data-order=\"4\">\n//             <span className=\"category_bg cafe\"></span>\n//             카페\n//           </li>\n//           <li id=\"CS2\" data-order=\"5\">\n//             <span className=\"category_bg store\"></span>\n//             편의점\n//           </li>\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// };\n// var searchname = '서울';\n// const Map = () => {\n//   const searchRef = useRef();\n//   const searchPlace = (e) => {\n//     e.preventDefault();\n//     searchname = searchRef.current.value;\n//     console.log(searchname);\n//   };\n//   useEffect(() => {\n//     var mapContainer = document.getElementById('map'), // 지도를 표시할 div\n//       mapOption = {\n//         center: new kakao.maps.LatLng(33.450701, 126.570667), // 지도의 중심좌표\n//         level: 3, // 지도의 확대 레벨\n//       };\n//     // 지도를 생성합니다\n//     var map = new kakao.maps.Map(mapContainer, mapOption);\n//     // 주소-좌표 변환 객체를 생성합니다\n//     var geocoder = new kakao.maps.services.Geocoder();\n//     // 주소로 좌표를 검색합니다\n//     geocoder.addressSearch(searchname, function (result, status) {\n//       // 정상적으로 검색이 완료됐으면\n//       if (status === kakao.maps.services.Status.OK) {\n//         var coords = new kakao.maps.LatLng(result[0].y, result[0].x);\n//         // 결과값으로 받은 위치를 마커로 표시합니다\n//         var marker = new kakao.maps.Marker({\n//           map: map,\n//           position: coords,\n//         });\n//         // 인포윈도우로 장소에 대한 설명을 표시합니다\n//         // var infowindow = new kakao.maps.InfoWindow({\n//         //   content:\n//         //     '<div style=\"width:150px;text-align:center;padding:6px 0;\">우리회사</div>',\n//         // });\n//         // infowindow.open(map, marker);\n//         // 지도의 중심을 결과값으로 받은 위치로 이동시킵니다\n//         map.setCenter(coords);\n//       }\n//     });\n//   }, []);\n//   return (\n//     <div>\n//       <form className=\"search\" onSubmit={searchPlace}>\n//         <input\n//           type=\"text\"\n//           className=\"searchInput\"\n//           placeholder=\"현재 위치를 입력하여주세요\"\n//           ref={searchRef}\n//         ></input>\n//         <input type=\"submit\" value=\"검색\"></input>\n//       </form>\n//       <div id=\"map\" style={{ width: '100 %', height: '350px' }}></div>\n//     </div>\n//   );\n// };\n\nfunction Maps() {\n  _s();\n\n  const [state, setState] = useState({\n    // 지도의 초기 위치\n    center: {\n      lat: 37.49676871972202,\n      lng: 127.02474726969814\n    },\n    // 지도 위치 변경시 panto를 이용할지(부드럽게 이동)\n    isPanto: true\n  });\n  const [searchAddress, SetSearchAddress] = useState();\n  const oneRef = useRef();\n  const twoRef = useRef();\n  const threeRef = useRef();\n  const fourRef = useRef(); // 주소 입력후 검색 클릭 시 원하는 주소로 이동\n\n  const SearchMap = () => {\n    const geocoder = new kakao.maps.services.Geocoder();\n\n    let callback = function (result, status) {\n      if (status === kakao.maps.services.Status.OK) {\n        const newSearch = result[0];\n        setState({\n          center: {\n            lat: newSearch.y,\n            lng: newSearch.x\n          }\n        });\n      }\n    };\n\n    geocoder.addressSearch(`${searchAddress}`, callback);\n  };\n\n  const handleSearchAddress = e => {\n    SetSearchAddress(e.target.value);\n  };\n\n  const SearchCategory = e => {\n    if (e.target.name == '애견동반카페') {\n      var keywords = '';\n      keywords = oneRef.current.name;\n      console.log(oneRef.current.name);\n      return keywords;\n    } else if (e.target.name == '동물병원') {\n      keywords = twoRef.current.name;\n      console.log(twoRef.current.name);\n      return keywords;\n    } else if (e.target.name == '애견미용실') {\n      keywords = threeRef.current.name;\n      console.log(threeRef.current.name);\n      return keywords;\n    } else if (e.target.name == '애견동반식당') {\n      keywords = fourRef.current.name;\n      console.log(fourRef.current.name);\n      return keywords;\n    }\n\n    const ps = new kakao.maps.services.Places();\n\n    const placesSearchCB = function (data, status, pagination) {\n      if (status === kakao.maps.services.Status.OK) {\n        const newSearch = data[0];\n        setState({\n          center: {\n            lat: newSearch.y,\n            lng: newSearch.x\n          }\n        });\n      }\n    };\n\n    ps.keywordSearch(keywords, placesSearchCB);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleSearchAddress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        placeholder: \"\\uD604\\uC7AC \\uC704\\uCE58\\uB97C \\uC785\\uB825\\uD558\\uC5EC \\uC8FC\\uC138\\uC694\",\n        onClick: SearchMap,\n        children: \"\\uAC80\\uC0C9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"button\",\n          name: \"\\uC560\\uACAC\\uB3D9\\uBC18\\uCE74\\uD398\",\n          value: \"\\uCE74\\uD398\",\n          ref: oneRef,\n          onClick: SearchCategory\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"button\",\n          name: \"\\uB3D9\\uBB3C\\uBCD1\\uC6D0\",\n          value: \"\\uBCD1\\uC6D0\",\n          ref: twoRef,\n          onClick: SearchCategory\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"button\",\n          name: \"\\uC560\\uACAC\\uBBF8\\uC6A9\\uC2E4\",\n          value: \"\\uBBF8\\uC6A9\\uC2E4\",\n          ref: threeRef,\n          onClick: SearchCategory\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"button\",\n          name: \"\\uC560\\uACAC\\uB3D9\\uBC18\\uC2DD\\uB2F9\",\n          value: \"\\uC2DD\\uB2F9\",\n          ref: fourRef,\n          onClick: SearchCategory\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Map // 지도를 표시할 Container\n    , {\n      center: state.center,\n      isPanto: state.isPanto,\n      style: {\n        // 지도의 크기\n        width: '100%',\n        height: '450px'\n      },\n      level: 3,\n      children: /*#__PURE__*/_jsxDEV(MapMarker, {\n        position: state.center,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: '#000'\n          },\n          children: \"\\uAC80\\uC0C9\\uC704\\uCE58\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 578,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Maps, \"o56Iwj+leAezcl7dJJsZd3JG1lg=\");\n\n_c = Maps;\nexport default Maps;\n\nvar _c;\n\n$RefreshReg$(_c, \"Maps\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","MapMarker","kakao","window","Maps","state","setState","center","lat","lng","isPanto","searchAddress","SetSearchAddress","oneRef","twoRef","threeRef","fourRef","SearchMap","geocoder","maps","services","Geocoder","callback","result","status","Status","OK","newSearch","y","x","addressSearch","handleSearchAddress","e","target","value","SearchCategory","name","keywords","current","console","log","ps","Places","placesSearchCB","data","pagination","keywordSearch","width","height","color"],"sources":["C:/Users/gowng/Downloads/ohDog/src/components/Maps.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { Map, MapMarker } from 'react-kakao-maps-sdk';\r\n// import '../css/map.scss';\r\nimport '../css/map.css';\r\nconst { kakao } = window;\r\n\r\n// const { kakao } = window;\r\n// let infowindow = new kakao.maps.InfoWindow({ zIndex: 1 });\r\n// var keywords = '애견동반카페';\r\n\r\n// const Map = () => {\r\n//   const oneRef = useRef();\r\n//   const twoRef = useRef();\r\n//   const threeRef = useRef();\r\n//   const fourRef = useRef();\r\n\r\n//   const onClick = (e) => {\r\n//     if (e.target.name == '애견동반카페') {\r\n//       keywords = oneRef.current.name;\r\n//       console.log(typeof keywords);\r\n//       console.log(oneRef.current.name);\r\n//       return keywords;\r\n//     } else if (e.target.name == '동물병원') {\r\n//       keywords = twoRef.current.name;\r\n//       console.log(twoRef.current.name);\r\n//       return keywords;\r\n//     } else if (e.target.name == '애견미용실') {\r\n//       keywords = threeRef.current.name;\r\n//       console.log(threeRef.current.name);\r\n//       return keywords;\r\n//     } else if (e.target.name == '애견동반식당') {\r\n//       keywords = fourRef.current.name;\r\n//       console.log(fourRef.current.name);\r\n//       return keywords;\r\n//     }\r\n//   };\r\n//   useEffect(() => {\r\n//     var container = document.getElementById('map');\r\n//     var options = {\r\n//       center: new kakao.maps.LatLng(37.365264512305174, 127.10676860117488),\r\n//       level: 3,\r\n//     };\r\n//     var map = new kakao.maps.Map(container, options);\r\n\r\n//     // 장소 검색 객체를 생성\r\n//     const ps = new kakao.maps.services.Places();\r\n\r\n//     // 키워드로 장소를 검색\r\n//     ps.keywordSearch(keywords, placesSearchCB);\r\n\r\n//     // 키워드 검색 완료 시 호출되는 콜백함수\r\n//     function placesSearchCB(data, status, pagination) {\r\n//       if (status === kakao.maps.services.Status.OK) {\r\n//         // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\r\n//         // LatLngBounds 객체에 좌표를 추가\r\n//         let bounds = new kakao.maps.LatLngBounds();\r\n\r\n//         for (let i = 0; i < data.length; i++) {\r\n//           displayMarker(data[i]);\r\n//           bounds.extend(new kakao.maps.LatLng(data[i].y, data[i].x));\r\n//         }\r\n\r\n//         // 검색된 장소 위치를 기준으로 지도 범위를 재설정\r\n//         map.setBounds(bounds);\r\n//       }\r\n//     }\r\n\r\n//     // 지도에 마커를 표시하는 함수\r\n//     function displayMarker(place) {\r\n//       // 마커를 생성하고 지도에 표시\r\n//       let marker = new kakao.maps.Marker({\r\n//         map: map,\r\n//         position: new kakao.maps.LatLng(place.y, place.x),\r\n//       });\r\n\r\n//       // 마커에 클릭이벤트를 등록\r\n//       kakao.maps.event.addListener(marker, 'click', function () {\r\n//         // 마커를 클릭하면 장소명이 인포윈도우에 표출\r\n//         infowindow.setContent(\r\n//           '<div style=\"padding:5px;font-size:12px;\">' +\r\n//             place.place_name +\r\n//             '</div>',\r\n//         );\r\n//         infowindow.open(map, marker);\r\n//       });\r\n//     }\r\n//   }, [keywords]);\r\n\r\n//   return (\r\n//     <>\r\n//       <form className=\"search\">\r\n//         <input type=\"text\" placeholder=\"현재위치를 입력해주세요\" />\r\n//         <input type=\"submit\" value=\"검색\" />\r\n//       </form>\r\n//       <div className=\"category\">\r\n//         <input\r\n//           type=\"button\"\r\n//           name=\"애견동반카페\"\r\n//           value=\"카페\"\r\n//           ref={oneRef}\r\n//           onClick={onClick}\r\n//         />\r\n//         <input\r\n//           type=\"button\"\r\n//           name=\"동물병원\"\r\n//           value=\"병원\"\r\n//           ref={twoRef}\r\n//           onClick={onClick}\r\n//         />\r\n//         <input\r\n//           type=\"button\"\r\n//           name=\"애견미용실\"\r\n//           value=\"미용실\"\r\n//           ref={threeRef}\r\n//           onClick={onClick}\r\n//         />\r\n//         <input\r\n//           type=\"button\"\r\n//           name=\"애견동반식당\"\r\n//           value=\"식당\"\r\n//           ref={fourRef}\r\n//           onClick={onClick}\r\n//         />\r\n//       </div>\r\n//       <div className=\"mapContent\">\r\n//         <div\r\n//           id=\"map\"\r\n//           style={{\r\n//             margin: '0 auto',\r\n//             width: '80%',\r\n//             height: '600px',\r\n//           }}\r\n//         ></div>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default Map;\r\n\r\n// // 마커를 클릭했을 때 해당 장소의 상세정보를 보여줄 커스텀오버레이입니다\r\n// var placeOverlay = new kakao.maps.CustomOverlay({ zIndex: 1 }),\r\n//   contentNode = document.createElement('div'), // 커스텀 오버레이의 컨텐츠 엘리먼트 입니다\r\n//   markers = [], // 마커를 담을 배열입니다\r\n//   currCategory = ''; // 현재 선택된 카테고리를 가지고 있을 변수입니다\r\n\r\n// const Map = () => {\r\n//   useEffect(() => {\r\n//     var mapContainer = document.getElementById('map'), // 지도를 표시할 div\r\n//       mapOption = {\r\n//         center: new kakao.maps.LatLng(37.566826, 126.9786567), // 지도의 중심좌표\r\n//         level: 5, // 지도의 확대 레벨\r\n//       };\r\n\r\n//     // 지도를 생성합니다\r\n//     var map = new kakao.maps.Map(mapContainer, mapOption);\r\n\r\n//     // 장소 검색 객체를 생성합니다\r\n//     var ps = new kakao.maps.services.Places(map);\r\n\r\n//     // 지도에 idle 이벤트를 등록합니다\r\n//     kakao.maps.event.addListener(map, 'idle', searchPlaces);\r\n\r\n//     // 커스텀 오버레이의 컨텐츠 노드에 css class를 추가합니다\r\n//     contentNode.className = 'placeinfo_wrap';\r\n\r\n//     // 커스텀 오버레이의 컨텐츠 노드에 mousedown, touchstart 이벤트가 발생했을때\r\n//     // 지도 객체에 이벤트가 전달되지 않도록 이벤트 핸들러로 kakao.maps.event.preventMap 메소드를 등록합니다\r\n//     addEventHandle(contentNode, 'mousedown', kakao.maps.event.preventMap);\r\n//     addEventHandle(contentNode, 'touchstart', kakao.maps.event.preventMap);\r\n\r\n//     // 커스텀 오버레이 컨텐츠를 설정합니다\r\n//     placeOverlay.setContent(contentNode);\r\n\r\n//     // 각 카테고리에 클릭 이벤트를 등록합니다\r\n//     addCategoryClickEvent();\r\n\r\n//     // 엘리먼트에 이벤트 핸들러를 등록하는 함수입니다\r\n//     function addEventHandle(target, type, callback) {\r\n//       if (target.addEventListener) {\r\n//         target.addEventListener(type, callback);\r\n//       } else {\r\n//         target.attachEvent('on' + type, callback);\r\n//       }\r\n//     }\r\n\r\n//     // 카테고리 검색을 요청하는 함수입니다\r\n//     function searchPlaces() {\r\n//       if (!currCategory) {\r\n//         return;\r\n//       }\r\n\r\n//       // 커스텀 오버레이를 숨깁니다\r\n//       placeOverlay.setMap(null);\r\n\r\n//       // 지도에 표시되고 있는 마커를 제거합니다\r\n//       removeMarker();\r\n\r\n//       ps.categorySearch(currCategory, placesSearchCB, { useMapBounds: true });\r\n//     }\r\n\r\n//     // 장소검색이 완료됐을 때 호출되는 콜백함수 입니다\r\n//     function placesSearchCB(data, status, pagination) {\r\n//       if (status === kakao.maps.services.Status.OK) {\r\n//         // 정상적으로 검색이 완료됐으면 지도에 마커를 표출합니다\r\n//         displayPlaces(data);\r\n//       } else if (status === kakao.maps.services.Status.ZERO_RESULT) {\r\n//         // 검색결과가 없는경우 해야할 처리가 있다면 이곳에 작성해 주세요\r\n//       } else if (status === kakao.maps.services.Status.ERROR) {\r\n//         // 에러로 인해 검색결과가 나오지 않은 경우 해야할 처리가 있다면 이곳에 작성해 주세요\r\n//       }\r\n//     }\r\n\r\n//     // 지도에 마커를 표출하는 함수입니다\r\n//     function displayPlaces(places) {\r\n//       // 몇번째 카테고리가 선택되어 있는지 얻어옵니다\r\n//       // 이 순서는 스프라이트 이미지에서의 위치를 계산하는데 사용됩니다\r\n//       var order = document\r\n//         .getElementById(currCategory)\r\n//         .getAttribute('data-order');\r\n\r\n//       for (var i = 0; i < places.length; i++) {\r\n//         // 마커를 생성하고 지도에 표시합니다\r\n//         var marker = addMarker(\r\n//           new kakao.maps.LatLng(places[i].y, places[i].x),\r\n//           order,\r\n//         );\r\n\r\n//         // 마커와 검색결과 항목을 클릭 했을 때\r\n//         // 장소정보를 표출하도록 클릭 이벤트를 등록합니다\r\n//         (function (marker, place) {\r\n//           kakao.maps.event.addListener(marker, 'click', function () {\r\n//             displayPlaceInfo(place);\r\n//           });\r\n//         })(marker, places[i]);\r\n//       }\r\n//     }\r\n\r\n//     // 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\r\n//     function addMarker(position, order) {\r\n//       var imageSrc =\r\n//           'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/places_category.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다\r\n//         imageSize = new kakao.maps.Size(27, 28), // 마커 이미지의 크기\r\n//         imgOptions = {\r\n//           spriteSize: new kakao.maps.Size(72, 208), // 스프라이트 이미지의 크기\r\n//           spriteOrigin: new kakao.maps.Point(46, order * 36), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\r\n//           offset: new kakao.maps.Point(11, 28), // 마커 좌표에 일치시킬 이미지 내에서의 좌표\r\n//         },\r\n//         markerImage = new kakao.maps.MarkerImage(\r\n//           imageSrc,\r\n//           imageSize,\r\n//           imgOptions,\r\n//         ),\r\n//         marker = new kakao.maps.Marker({\r\n//           position: position, // 마커의 위치\r\n//           image: markerImage,\r\n//         });\r\n\r\n//       marker.setMap(map); // 지도 위에 마커를 표출합니다\r\n//       markers.push(marker); // 배열에 생성된 마커를 추가합니다\r\n\r\n//       return marker;\r\n//     }\r\n\r\n//     // 지도 위에 표시되고 있는 마커를 모두 제거합니다\r\n//     function removeMarker() {\r\n//       for (var i = 0; i < markers.length; i++) {\r\n//         markers[i].setMap(null);\r\n//       }\r\n//       markers = [];\r\n//     }\r\n\r\n//     // 클릭한 마커에 대한 장소 상세정보를 커스텀 오버레이로 표시하는 함수입니다\r\n//     function displayPlaceInfo(place) {\r\n//       var content =\r\n//         '<div class=\"placeinfo\">' +\r\n//         '   <a class=\"title\" href=\"' +\r\n//         place.place_url +\r\n//         '\" target=\"_blank\" title=\"' +\r\n//         place.place_name +\r\n//         '\">' +\r\n//         place.place_name +\r\n//         '</a>';\r\n\r\n//       if (place.road_address_name) {\r\n//         content +=\r\n//           '    <span title=\"' +\r\n//           place.road_address_name +\r\n//           '\">' +\r\n//           place.road_address_name +\r\n//           '</span>' +\r\n//           '  <span class=\"jibun\" title=\"' +\r\n//           place.address_name +\r\n//           '\">(지번 : ' +\r\n//           place.address_name +\r\n//           ')</span>';\r\n//       } else {\r\n//         content +=\r\n//           '    <span title=\"' +\r\n//           place.address_name +\r\n//           '\">' +\r\n//           place.address_name +\r\n//           '</span>';\r\n//       }\r\n\r\n//       content +=\r\n//         '    <span class=\"tel\">' +\r\n//         place.phone +\r\n//         '</span>' +\r\n//         '</div>' +\r\n//         '<div class=\"after\"></div>';\r\n\r\n//       contentNode.innerHTML = content;\r\n//       placeOverlay.setPosition(new kakao.maps.LatLng(place.y, place.x));\r\n//       placeOverlay.setMap(map);\r\n//     }\r\n\r\n//     // 각 카테고리에 클릭 이벤트를 등록합니다\r\n//     function addCategoryClickEvent() {\r\n//       var category = document.getElementById('category'),\r\n//         children = category.children;\r\n\r\n//       for (var i = 0; i < children.length; i++) {\r\n//         children[i].onclick = onClickCategory;\r\n//       }\r\n//     }\r\n\r\n//     // 카테고리를 클릭했을 때 호출되는 함수입니다\r\n//     function onClickCategory() {\r\n//       var id = this.id,\r\n//         className = this.className;\r\n\r\n//       placeOverlay.setMap(null);\r\n\r\n//       if (className === 'on') {\r\n//         currCategory = '';\r\n//         changeCategoryClass();\r\n//         removeMarker();\r\n//       } else {\r\n//         currCategory = id;\r\n//         changeCategoryClass(this);\r\n//         searchPlaces();\r\n//       }\r\n//     }\r\n\r\n//     // 클릭된 카테고리에만 클릭된 스타일을 적용하는 함수입니다\r\n//     function changeCategoryClass(el) {\r\n//       var category = document.getElementById('category'),\r\n//         children = category.children,\r\n//         i;\r\n\r\n//       for (i = 0; i < children.length; i++) {\r\n//         children[i].className = '';\r\n//       }\r\n\r\n//       if (el) {\r\n//         el.className = 'on';\r\n//       }\r\n//     }\r\n//   }, []);\r\n//   return (\r\n//     <div>\r\n//       <div className=\"map_wrap\">\r\n//         <div\r\n//           id=\"map\"\r\n//           style={{\r\n//             width: '100%',\r\n//             height: '100%',\r\n//             position: 'relative',\r\n//             overflow: 'hidden',\r\n//           }}\r\n//         ></div>\r\n//         <ul id=\"category\">\r\n//           <li id=\"BK9\" data-order=\"0\">\r\n//             <span className=\"category_bg bank\"></span>\r\n//             은행\r\n//           </li>\r\n//           <li id=\"MT1\" data-order=\"1\">\r\n//             <span className=\"category_bg mart\"></span>\r\n//             마트\r\n//           </li>\r\n//           <li id=\"PM9\" data-order=\"2\">\r\n//             <span className=\"category_bg pharmacy\"></span>\r\n//             약국\r\n//           </li>\r\n//           <li id=\"OL7\" data-order=\"3\">\r\n//             <span className=\"category_bg oil\"></span>\r\n//             주유소\r\n//           </li>\r\n//           <li id=\"CE7\" data-order=\"4\">\r\n//             <span className=\"category_bg cafe\"></span>\r\n//             카페\r\n//           </li>\r\n//           <li id=\"CS2\" data-order=\"5\">\r\n//             <span className=\"category_bg store\"></span>\r\n//             편의점\r\n//           </li>\r\n//         </ul>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// var searchname = '서울';\r\n// const Map = () => {\r\n//   const searchRef = useRef();\r\n//   const searchPlace = (e) => {\r\n//     e.preventDefault();\r\n//     searchname = searchRef.current.value;\r\n//     console.log(searchname);\r\n//   };\r\n//   useEffect(() => {\r\n//     var mapContainer = document.getElementById('map'), // 지도를 표시할 div\r\n//       mapOption = {\r\n//         center: new kakao.maps.LatLng(33.450701, 126.570667), // 지도의 중심좌표\r\n//         level: 3, // 지도의 확대 레벨\r\n//       };\r\n\r\n//     // 지도를 생성합니다\r\n//     var map = new kakao.maps.Map(mapContainer, mapOption);\r\n//     // 주소-좌표 변환 객체를 생성합니다\r\n//     var geocoder = new kakao.maps.services.Geocoder();\r\n\r\n//     // 주소로 좌표를 검색합니다\r\n//     geocoder.addressSearch(searchname, function (result, status) {\r\n//       // 정상적으로 검색이 완료됐으면\r\n//       if (status === kakao.maps.services.Status.OK) {\r\n//         var coords = new kakao.maps.LatLng(result[0].y, result[0].x);\r\n\r\n//         // 결과값으로 받은 위치를 마커로 표시합니다\r\n//         var marker = new kakao.maps.Marker({\r\n//           map: map,\r\n//           position: coords,\r\n//         });\r\n\r\n//         // 인포윈도우로 장소에 대한 설명을 표시합니다\r\n//         // var infowindow = new kakao.maps.InfoWindow({\r\n//         //   content:\r\n//         //     '<div style=\"width:150px;text-align:center;padding:6px 0;\">우리회사</div>',\r\n//         // });\r\n//         // infowindow.open(map, marker);\r\n\r\n//         // 지도의 중심을 결과값으로 받은 위치로 이동시킵니다\r\n//         map.setCenter(coords);\r\n//       }\r\n//     });\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div>\r\n//       <form className=\"search\" onSubmit={searchPlace}>\r\n//         <input\r\n//           type=\"text\"\r\n//           className=\"searchInput\"\r\n//           placeholder=\"현재 위치를 입력하여주세요\"\r\n//           ref={searchRef}\r\n//         ></input>\r\n//         <input type=\"submit\" value=\"검색\"></input>\r\n//       </form>\r\n//       <div id=\"map\" style={{ width: '100 %', height: '350px' }}></div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\nfunction Maps() {\r\n  const [state, setState] = useState({\r\n    // 지도의 초기 위치\r\n    center: { lat: 37.49676871972202, lng: 127.02474726969814 },\r\n    // 지도 위치 변경시 panto를 이용할지(부드럽게 이동)\r\n    isPanto: true,\r\n  });\r\n  const [searchAddress, SetSearchAddress] = useState();\r\n  const oneRef = useRef();\r\n  const twoRef = useRef();\r\n  const threeRef = useRef();\r\n  const fourRef = useRef();\r\n\r\n  // 주소 입력후 검색 클릭 시 원하는 주소로 이동\r\n  const SearchMap = () => {\r\n    const geocoder = new kakao.maps.services.Geocoder();\r\n\r\n    let callback = function (result, status) {\r\n      if (status === kakao.maps.services.Status.OK) {\r\n        const newSearch = result[0];\r\n        setState({\r\n          center: { lat: newSearch.y, lng: newSearch.x },\r\n        });\r\n      }\r\n    };\r\n    geocoder.addressSearch(`${searchAddress}`, callback);\r\n  };\r\n\r\n  const handleSearchAddress = (e) => {\r\n    SetSearchAddress(e.target.value);\r\n  };\r\n\r\n  const SearchCategory = (e) => {\r\n    if (e.target.name == '애견동반카페') {\r\n      var keywords = '';\r\n      keywords = oneRef.current.name;\r\n      console.log(oneRef.current.name);\r\n      return keywords;\r\n    } else if (e.target.name == '동물병원') {\r\n      keywords = twoRef.current.name;\r\n      console.log(twoRef.current.name);\r\n      return keywords;\r\n    } else if (e.target.name == '애견미용실') {\r\n      keywords = threeRef.current.name;\r\n      console.log(threeRef.current.name);\r\n      return keywords;\r\n    } else if (e.target.name == '애견동반식당') {\r\n      keywords = fourRef.current.name;\r\n      console.log(fourRef.current.name);\r\n      return keywords;\r\n    }\r\n\r\n    const ps = new kakao.maps.services.Places();\r\n    const placesSearchCB = function (data, status, pagination) {\r\n      if (status === kakao.maps.services.Status.OK) {\r\n        const newSearch = data[0];\r\n        setState({\r\n          center: { lat: newSearch.y, lng: newSearch.x },\r\n        });\r\n      }\r\n    };\r\n    ps.keywordSearch(keywords, placesSearchCB);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <input onChange={handleSearchAddress}></input>\r\n        <button placeholder=\"현재 위치를 입력하여 주세요\" onClick={SearchMap}>\r\n          검색\r\n        </button>\r\n        <div>\r\n          <input\r\n            type=\"button\"\r\n            name=\"애견동반카페\"\r\n            value=\"카페\"\r\n            ref={oneRef}\r\n            onClick={SearchCategory}\r\n          />\r\n          <input\r\n            type=\"button\"\r\n            name=\"동물병원\"\r\n            value=\"병원\"\r\n            ref={twoRef}\r\n            onClick={SearchCategory}\r\n          />\r\n          <input\r\n            type=\"button\"\r\n            name=\"애견미용실\"\r\n            value=\"미용실\"\r\n            ref={threeRef}\r\n            onClick={SearchCategory}\r\n          />\r\n          <input\r\n            type=\"button\"\r\n            name=\"애견동반식당\"\r\n            value=\"식당\"\r\n            ref={fourRef}\r\n            onClick={SearchCategory}\r\n          />\r\n        </div>\r\n      </div>\r\n      <Map // 지도를 표시할 Container\r\n        center={state.center}\r\n        isPanto={state.isPanto}\r\n        style={{\r\n          // 지도의 크기\r\n          width: '100%',\r\n          height: '450px',\r\n        }}\r\n        level={3}\r\n      >\r\n        <MapMarker position={state.center}>\r\n          <div\r\n            style={{\r\n              color: '#000',\r\n            }}\r\n          >\r\n            검색위치\r\n          </div>\r\n        </MapMarker>\r\n      </Map>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Maps;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}